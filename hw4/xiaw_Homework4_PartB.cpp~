// Compiler command-line:
//     make SRC=exercise7.cpp LIBS=-lOpenCL
//
// Alternative (not preferred):
//     g++ -g -Wall -std=c++11 exercise7.cpp -o execise7 -lOpenCL

// Enable OpenCL C++ exceptions
#define __CL_ENABLE_EXCEPTIONS
#include "CL/cl.hpp"

#include <cstdio>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <iterator>

// Implement the following add method (add suitable helper methods as
// you see fit) to use an OpenCL kernel to add each entry in the the
// two vectors, that is: result[i] = vec1[i] + vec2[i]
const std::string kernelSrc=
  "#pragma OPENCL EXTENSION cl_khr_fp64 : enable \n"
  "typedef float Type;"
  "typedef std::vector<Type> NumList;"
  "__kernel void   \n	"
  "vadd(__global float * a, __global float* b, 	"
  "  __global float* c) { \n	"
  " size_t i = get_global_id(0); // Get index to operate on \n"
  "c[i] = a[i] + b[i]; \n"
  "}"

  "__kernel NumList \n"

;

cl::Kernel createKernel(cl::Context context, cl::Device device) {
  cl::Program::Sources sources(1, std::make_pair(kernelSrc.c_str(), 0));
  cl::Program program(context, sources);
  // Build Open CL program for a given device
  try {	
    program.build({ device });
  } catch (cl::Error error) {	
    std::cout << "Build log:" << std::endl
	      << program.getBuildInfo<CL_PROGRAM_BUILD_LOG>(device)
	      << std::endl;
    throw error;	
  }
  // Create a kernel from a program
  cl::Kernel kernel(program, "vadd");
  return kernel;
}

NumList operator+(const NumList& nl1, const NumList& nl2) {
    NumList retVal(nl1);
    std::transform(nl1.begin(), nl1.end(), nl2.begin(), retVal.begin(),
                   std::plus<Type>());
    return retVal;



    std::vector<cl::Platform> platformList;
    cl::Platform::get(&platformList);
    std::vector<cl::Device> deviceList;
    platformList[0].getDevices(CL_DEVICE_TYPE_ALL,&deviceList);
    cl::Context context = cl::Context(deviceList);
    cl::Device device = deviceList[0];
    
    cl::Kernel kernel =createKernel(context,device);
    cl::CommandQueue queue = cl::CommandQueue(context,device);
    const int ROFlags = CL_MEM_READ_ONLY|CL_MEM_USE_HOST_PTR;
    const int bytesSize = vec1.size() * sizeof(float);
    cl::Buffer vec1Buf = cl::Buffer(context,ROFlags,bytesSize
                                    ,const_cast<float *> (&vec1[0]));

    cl::Buffer vec2Buf = cl::Buffer(context,ROFlags,bytesSize
                                    ,const_cast<float *> (&vec2[0]));
    std::vector<float> vec3(vec1.size());
    cl::Buffer vec3Buf = cl::Buffer(context,ROFlags,bytesSize
                                    ,const_cast<float *> (&vec3[0]));

}

std::vector<float> add(const std::vector<float>& vec1, const std::vector<float>& vec2) {
    std::vector<cl::Platform> platformList;
    cl::Platform::get(&platformList);
    std::vector<cl::Device> deviceList;
    platformList[0].getDevices(CL_DEVICE_TYPE_ALL,&deviceList);
    cl::Context context = cl::Context(deviceList);
    cl::Device device = deviceList[0];
    
    cl::Kernel kernel =createKernel(context,device);
    cl::CommandQueue queue = cl::CommandQueue(context,device);
    const int ROFlags = CL_MEM_READ_ONLY|CL_MEM_USE_HOST_PTR;

    const int bytesSize = vec1.size() * sizeof(float);
    cl::Buffer vec1Buf = cl::Buffer(context,ROFlags,bytesSize
                                    ,const_cast<float *> (&vec1[0]));

    cl::Buffer vec2Buf = cl::Buffer(context,ROFlags,bytesSize
                                    ,const_cast<float *> (&vec2[0]));
    std::vector<float> vec3(vec1.size());
    cl::Buffer vec3Buf = cl::Buffer(context,ROFlags,bytesSize
                                    ,const_cast<float *> (&vec3[0]));
    kernel.setArg(0, vec1Buf);
    kernel.setArg(1, vec2Buf);
    kernel.setArg(2, vec3Buf);
    queue.enqueueNDRangeKernel(kernel, cl::NullRange,
                               cl::NDRange(vec1.size()), cl::NullRange);
    queue.enqueueMapBuffer(vec3Buf, CL_TRUE, CL_MAP_READ, 0, bytesSize);

    //for(int i = 0 ; i< vec1.size();i++) {
    //  std::cout << vec3[i];
    //}
    return vec3;
    
}

//-----------------------------------------------------------------------
//           DO  NOT   MODIFY   CODE  BELOW  THIS  LINE
//-----------------------------------------------------------------------

std::vector<float> generate(const int size) {
    float i = 0;
    auto producer = [&i](){ return i++; };
    std::vector<float> list(size);
    std::generate_n(list.begin(), size, producer);
    return list;
}

int
main(int argc, char *argv[]) {
    if (argc != 2) {
        std::cerr << "Usage  : " << argv[0] << " <vector_size>\n"
                  << "Example: " << argv[0] << " 20\n";
        return 2;
    }
    // Create the vectors for use.
    const int count = std::stoi(argv[1]);
    const std::vector<float> vec1 = generate(count), vec2 = generate(count);
    // Get the result by doing the addition via OpenCL calls
    const std::vector<float> result = add(vec1, vec2);
    // Print the results
    std::copy(result.begin(), result.end(),
              std::ostream_iterator<float>(std::cout, "\n"));
    // All done.
    return 0;
}

// End of source code
